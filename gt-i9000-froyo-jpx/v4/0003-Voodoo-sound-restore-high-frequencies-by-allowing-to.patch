From 0c75526090fdc296e030a9ccf4f919de035a5d3c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?SIMOND=20Fran=C3=A7ois?= <francois@lienweb.fr>
Date: Sun, 30 Jan 2011 10:57:17 +0100
Subject: [PATCH 3/7] Voodoo sound: restore high frequencies by allowing to control a filter and bump the input gain

---
 Kernel/sound/soc/codecs/wm8994_aries.c  |   11 +++
 Kernel/sound/soc/codecs/wm8994_voodoo.c |  104 +++++++++++++++++++++++++------
 Kernel/sound/soc/codecs/wm8994_voodoo.h |    3 +-
 3 files changed, 98 insertions(+), 20 deletions(-)

diff --git a/Kernel/sound/soc/codecs/wm8994_aries.c b/Kernel/sound/soc/codecs/wm8994_aries.c
index b9961bb..c80b8ad 100644
--- a/Kernel/sound/soc/codecs/wm8994_aries.c
+++ b/Kernel/sound/soc/codecs/wm8994_aries.c
@@ -3822,6 +3822,9 @@ void wm8994_set_fmradio_common(struct snd_soc_codec *codec, int onoff)
 			wm8994_write(codec, WM8994_INPUT_MIXER_4, val);	
 		}
 	}		
+#ifdef CONFIG_SND_VOODOO_FM
+	voodoo_hook_fmradio_headset();
+#endif
 }
 
 void wm8994_set_fmradio_headset(struct snd_soc_codec *codec)
@@ -4333,6 +4336,10 @@ void wm8994_set_fmradio_headset_mix(struct snd_soc_codec *codec)
 		val |= (WM8994_DAC1_VU | TUNING_DAC1L_VOL); 
 		wm8994_write(codec,WM8994_DAC1_LEFT_VOLUME ,val);
 		
+#ifdef CONFIG_SND_VOODOO_FM
+	voodoo_hook_fmradio_headset();
+#endif
+
 		//Unmute and volume ctrl RightDAC
 		val = wm8994_read(codec, WM8994_DAC1_RIGHT_VOLUME ); 
 		val &= ~(WM8994_DAC1R_MUTE_MASK | WM8994_DAC1R_VOL_MASK);
@@ -4676,6 +4683,10 @@ void wm8994_set_fmradio_speaker_headset_mix(struct snd_soc_codec *codec)
 
 	msleep(20);
 
+#ifdef CONFIG_SND_VOODOO_FM
+	voodoo_hook_fmradio_headset();
+#endif
+
 	//* Headphone Output
 		// Intermediate HP settings
 	val = wm8994_read(codec, WM8994_ANALOGUE_HP_1); 	
diff --git a/Kernel/sound/soc/codecs/wm8994_voodoo.c b/Kernel/sound/soc/codecs/wm8994_voodoo.c
index 1f48c2b..c6557c5 100644
--- a/Kernel/sound/soc/codecs/wm8994_voodoo.c
+++ b/Kernel/sound/soc/codecs/wm8994_voodoo.c
@@ -35,6 +35,8 @@ unsigned short hprvol = CONFIG_SND_VOODOO_HP_LEVEL;
 
 #ifdef CONFIG_SND_VOODOO_FM
 bool fm_radio_headset_restore_bass = true;
+bool fm_radio_headset_restore_highs = true;
+bool fm_radio_headset_normalize_gain = true;
 #endif
 
 #ifdef CONFIG_SND_VOODOO_RECORD_PRESETS
@@ -72,14 +74,15 @@ void update_hpvol()
 	val = (WM8994_HPOUT1_VU | WM8994_HPOUT1R_MUTE_N | hprvol);
 	val |= WM8994_HPOUT1L_ZC;
 	wm8994_write(codec_, WM8994_RIGHT_OUTPUT_VOLUME, val);
-
 	bypass_write_hook = false;
 }
 #endif
 
 #ifdef CONFIG_SND_VOODOO_FM
-void update_fm_radio_headset_restore_bass(bool with_mute)
+void update_fm_radio_headset_restore_freqs(bool with_mute)
 {
+	unsigned short val;
+
 	if (with_mute)
 	{
 		wm8994_write(codec_, WM8994_AIF2_DAC_FILTERS_1, 0x236);
@@ -102,9 +105,38 @@ void update_fm_radio_headset_restore_bass(bool with_mute)
 		wm8994_write(codec_, WM8994_AIF2_ADC_FILTERS, 0xF800);
 	}
 
+	if (fm_radio_headset_restore_highs)
+	{
+		val = wm8994_read(codec_, WM8994_AIF2_DAC_FILTERS_1);
+		val &= ~(WM8994_AIF2DAC_DEEMP_MASK);
+		wm8994_write(codec_, WM8994_AIF2_DAC_FILTERS_1, val);
+	}
+	else
+		wm8994_write(codec_, WM8994_AIF2_DAC_FILTERS_1, 0x0036);
+
 	// un-mute
 	if (with_mute)
-		wm8994_write(codec_, WM8994_AIF2_DAC_FILTERS_1, 0x036);
+	{
+		val = wm8994_read(codec_, WM8994_AIF2_DAC_FILTERS_1);
+		val &= ~(WM8994_AIF2DAC_MUTE_MASK);
+		wm8994_write(codec_, WM8994_AIF2_DAC_FILTERS_1, val);
+	}
+}
+
+void update_fm_radio_headset_normalize_gain()
+{
+	if (fm_radio_headset_normalize_gain)
+	{
+		// Bumped volume, change with Zero Cross
+		wm8994_write(codec_, WM8994_LEFT_LINE_INPUT_3_4_VOLUME, 0x4F);
+		wm8994_write(codec_, WM8994_RIGHT_LINE_INPUT_3_4_VOLUME, 0x14F);
+	}
+	else
+	{
+		// Original volume, change with Zero Cross
+		wm8994_write(codec_, WM8994_LEFT_LINE_INPUT_3_4_VOLUME, 0x4B);
+		wm8994_write(codec_, WM8994_RIGHT_LINE_INPUT_3_4_VOLUME, 0x14B);
+	}
 }
 #endif
 
@@ -205,8 +237,7 @@ unsigned short dac_osr128_get_value(unsigned short val)
 void update_dac_osr128()
 {
 	unsigned short val;
-	val = wm8994_read(codec_, WM8994_OVERSAMPLING);
-	val = dac_osr128_get_value(val);
+	val = dac_osr128_get_value(wm8994_read(codec_, WM8994_OVERSAMPLING));
 	bypass_write_hook = true;
 	wm8994_write(codec_, WM8994_OVERSAMPLING, val);
 	bypass_write_hook = false;
@@ -223,8 +254,7 @@ unsigned short fll_tuning_get_value(unsigned short val)
 void update_fll_tuning()
 {
 	unsigned short val;
-	val = wm8994_read(codec_, WM8994_FLL1_CONTROL_4);
-	val = fll_tuning_get_value(val);
+	val = fll_tuning_get_value(wm8994_read(codec_, WM8994_FLL1_CONTROL_4));
 	bypass_write_hook = true;
 	wm8994_write(codec_, WM8994_FLL1_CONTROL_4, val);
 	bypass_write_hook = false;
@@ -243,11 +273,15 @@ unsigned short mono_downmix_get_value(unsigned short val)
 
 void update_mono_downmix()
 {
-	unsigned short val;
-	val = wm8994_read(codec_, WM8994_AIF1_DAC1_FILTERS_1);
+	unsigned short val1, val2, val3;
+	val1 = mono_downmix_get_value(wm8994_read(codec_, WM8994_AIF1_DAC1_FILTERS_1));
+	val2 = mono_downmix_get_value(wm8994_read(codec_, WM8994_AIF1_DAC2_FILTERS_1));
+	val3 = mono_downmix_get_value(wm8994_read(codec_, WM8994_AIF2_DAC_FILTERS_1));
 
 	bypass_write_hook = true;
-	wm8994_write(codec_, WM8994_AIF1_DAC1_FILTERS_1, val);
+	wm8994_write(codec_, WM8994_AIF1_DAC1_FILTERS_1, val1);
+	wm8994_write(codec_, WM8994_AIF1_DAC2_FILTERS_1, val2);
+	wm8994_write(codec_, WM8994_AIF2_DAC_FILTERS_1, val3);
 	bypass_write_hook = false;
 }
 
@@ -288,12 +322,40 @@ static ssize_t fm_radio_headset_restore_bass_store(struct device *dev, struct de
 	unsigned short state;
 	if (sscanf(buf, "%hu", &state) == 1)
 	{
-		if (state == 0)
-			fm_radio_headset_restore_bass = false;
-		else
-			fm_radio_headset_restore_bass = true;
+		fm_radio_headset_restore_bass = state == 0 ? false : true;
+		update_fm_radio_headset_restore_freqs(true);
+	}
+	return size;
+}
 
-		update_fm_radio_headset_restore_bass(true);
+static ssize_t fm_radio_headset_restore_highs_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf,"%u\n",(fm_radio_headset_restore_highs ? 1 : 0));
+}
+
+static ssize_t fm_radio_headset_restore_highs_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)
+{
+	unsigned short state;
+	if (sscanf(buf, "%hu", &state) == 1)
+	{
+		fm_radio_headset_restore_highs = state == 0 ? false : true;
+		update_fm_radio_headset_restore_freqs(true);
+	}
+	return size;
+}
+
+static ssize_t fm_radio_headset_normalize_gain_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf,"%u\n",(fm_radio_headset_restore_highs ? 1 : 0));
+}
+
+static ssize_t fm_radio_headset_normalize_gain_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)
+{
+	unsigned short state;
+	if (sscanf(buf, "%hu", &state) == 1)
+	{
+		fm_radio_headset_normalize_gain = state == 0 ? false : true;
+		update_fm_radio_headset_normalize_gain();
 	}
 	return size;
 }
@@ -468,6 +530,8 @@ static DEVICE_ATTR(headphone_amplifier_level, S_IRUGO | S_IWUGO , headphone_ampl
 #endif
 #ifdef CONFIG_SND_VOODOO_FM
 static DEVICE_ATTR(fm_radio_headset_restore_bass, S_IRUGO | S_IWUGO , fm_radio_headset_restore_bass_show, fm_radio_headset_restore_bass_store);
+static DEVICE_ATTR(fm_radio_headset_restore_highs, S_IRUGO | S_IWUGO , fm_radio_headset_restore_highs_show, fm_radio_headset_restore_highs_store);
+static DEVICE_ATTR(fm_radio_headset_normalize_gain, S_IRUGO | S_IWUGO , fm_radio_headset_normalize_gain_show, fm_radio_headset_normalize_gain_store);
 #endif
 #ifdef CONFIG_SND_VOODOO_RECORD_PRESETS
 static DEVICE_ATTR(recording_preset, S_IRUGO | S_IWUGO , recording_preset_show, recording_preset_store);
@@ -488,6 +552,8 @@ static struct attribute *voodoo_sound_attributes[] = {
 #endif
 #ifdef CONFIG_SND_VOODOO_FM
 		&dev_attr_fm_radio_headset_restore_bass.attr,
+		&dev_attr_fm_radio_headset_restore_highs.attr,
+		&dev_attr_fm_radio_headset_normalize_gain.attr,
 #endif
 #ifdef CONFIG_SND_VOODOO_RECORD_PRESETS
 		&dev_attr_recording_preset.attr,
@@ -523,10 +589,11 @@ static struct miscdevice voodoo_sound_device = {
 #ifdef CONFIG_SND_VOODOO_FM
 void voodoo_hook_fmradio_headset()
 {
-	if (! fm_radio_headset_restore_bass)
+	if (! fm_radio_headset_restore_bass && ! fm_radio_headset_restore_highs && !fm_radio_headset_normalize_gain)
 		return;
 
-	update_fm_radio_headset_restore_bass(false);
+	update_fm_radio_headset_restore_freqs(false);
+	update_fm_radio_headset_normalize_gain();
 }
 #endif
 
@@ -564,14 +631,13 @@ unsigned int voodoo_hook_wm8994_write(struct snd_soc_codec *codec, unsigned int
 			value = dac_osr128_get_value(value);
 		if (reg == WM8994_FLL1_CONTROL_4)
 			value = fll_tuning_get_value(value);
-		if (reg == WM8994_AIF1_DAC1_FILTERS_1)
+		if (reg == WM8994_AIF1_DAC1_FILTERS_1 || reg == WM8994_AIF1_DAC2_FILTERS_1 || reg == WM8994_AIF2_DAC_FILTERS_1)
 			value = mono_downmix_get_value(value);
 	}
 
 #ifdef CONFIG_SND_VOODOO_DEBUG_LOG
 	// log every write to dmesg
 	printk("Voodoo sound: wm8994_write register= [%X] value= [%X]\n", reg, value);
-	if (reg == WM8994_LEFT_OUTPUT_VOLUME || reg == WM8994_RIGHT_OUTPUT_VOLUME)
 	printk("Voodoo sound: cur_path=%i, rec_path=%i, fmradio_path=%i, fmr_mix_path=%i, power_state=%i, recognition_active=%i, ringtone_active=%i\n",
 		wm8994->cur_path, wm8994->rec_path, wm8994->fmradio_path, wm8994->fmr_mix_path, wm8994->power_state, wm8994->recognition_active, wm8994->ringtone_active);
 #endif
diff --git a/Kernel/sound/soc/codecs/wm8994_voodoo.h b/Kernel/sound/soc/codecs/wm8994_voodoo.h
index 3214d34..73e5895 100644
--- a/Kernel/sound/soc/codecs/wm8994_voodoo.h
+++ b/Kernel/sound/soc/codecs/wm8994_voodoo.h
@@ -12,7 +12,8 @@ void voodoo_hook_wm8994_pcm_probe(struct snd_soc_codec *codec);
 void voodoo_hook_record_main_mic(void);
 void voodoo_hook_playback_headset(void);
 void update_hpvol(void);
-void update_fm_radio_headset_restore_bass(bool with_mute);
+void update_fm_radio_headset_restore_freqs(bool with_mute);
+void update_fm_radio_headset_normalize_gain(void);
 void update_recording_preset(void);
 void update_full_bitwidth(bool with_mute);
 void update_dac_osr128(void);
-- 
1.7.1

